// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/exchange": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "ApiEmailAuth": []
                    },
                    {
                        "ApiRoleAuth": []
                    }
                ],
                "description": "Converts game tokens to platform tokens and adds to wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet",
                    "exchange"
                ],
                "summary": "Exchange game tokens",
                "parameters": [
                    {
                        "description": "Exchange request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ExchangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange result",
                        "schema": {
                            "$ref": "#/definitions/dto.ExchangeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or exchange rate not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ExchangeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ExchangeResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ExchangeResponse"
                        }
                    }
                }
            }
        },
        "/spend": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "ApiEmailAuth": []
                    },
                    {
                        "ApiRoleAuth": []
                    }
                ],
                "description": "Deducts tokens from a user's wallet for purchases or entries",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet",
                    "spend"
                ],
                "summary": "Spend tokens",
                "parameters": [
                    {
                        "description": "Spend request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SpendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Spend result",
                        "schema": {
                            "$ref": "#/definitions/dto.SpendResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request, insufficient funds, or wallet not found",
                        "schema": {
                            "$ref": "#/definitions/dto.SpendResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.SpendResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/dto.SpendResponse"
                        }
                    }
                }
            }
        },
        "/{user_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "ApiEmailAuth": []
                    },
                    {
                        "ApiRoleAuth": []
                    }
                ],
                "description": "Returns wallet information for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get wallet information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wallet information",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletResponse"
                        }
                    },
                    "404": {
                        "description": "Wallet not found",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletResponse"
                        }
                    }
                }
            }
        },
        "/{user_id}/logs": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "ApiEmailAuth": []
                    },
                    {
                        "ApiRoleAuth": []
                    }
                ],
                "description": "Returns transaction logs for a specific user wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet",
                    "logs"
                ],
                "summary": "Get wallet transaction logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wallet logs",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletLogsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletLogsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletLogsResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletLogsResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ExchangeRequest": {
            "description": "Request for token exchange",
            "type": "object",
            "required": [
                "amount",
                "game_id",
                "source",
                "token_type",
                "user_id"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 150
                },
                "game_id": {
                    "type": "string",
                    "minLength": 1,
                    "example": "game-abc"
                },
                "source": {
                    "type": "string",
                    "enum": [
                        "won",
                        "purchased"
                    ],
                    "example": "won"
                },
                "token_type": {
                    "type": "string",
                    "minLength": 1,
                    "example": "gold"
                },
                "user_id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "dto.ExchangeResponse": {
            "description": "Response for exchange operations",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": ""
                },
                "new_balance": {
                    "type": "number",
                    "example": 165.5
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "dto.GenericResponse": {
            "description": "Generic API response",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Authentication required"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "dto.SpendRequest": {
            "description": "Request for token spending",
            "type": "object",
            "required": [
                "amount",
                "reason",
                "reference_id",
                "user_id"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 50
                },
                "reason": {
                    "type": "string",
                    "enum": [
                        "market_purchase",
                        "competition_entry"
                    ],
                    "example": "market_purchase"
                },
                "reference_id": {
                    "type": "string",
                    "minLength": 1,
                    "example": "ORDER-99887"
                },
                "user_id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "dto.SpendResponse": {
            "description": "Response for spend operations",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": ""
                },
                "new_balance": {
                    "type": "number",
                    "example": 100.5
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "dto.Wallet": {
            "description": "User wallet information",
            "type": "object",
            "required": [
                "id",
                "user_id"
            ],
            "properties": {
                "balance": {
                    "type": "number",
                    "minimum": 0,
                    "example": 150.5
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-05-16T20:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "user_id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "dto.WalletLogEntry": {
            "description": "Wallet transaction log entry",
            "type": "object",
            "required": [
                "operation"
            ],
            "properties": {
                "converted_amount": {
                    "type": "number",
                    "example": 15
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-05-16T20:00:00Z"
                },
                "game_id": {
                    "type": "string",
                    "example": "game-abc"
                },
                "operation": {
                    "type": "string",
                    "enum": [
                        "exchange",
                        "spend"
                    ],
                    "example": "exchange"
                },
                "original_amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 150
                },
                "reference_id": {
                    "type": "string",
                    "example": "ORDER-99887"
                },
                "source": {
                    "type": "string",
                    "example": "won"
                },
                "token_type": {
                    "type": "string",
                    "example": "gold"
                }
            }
        },
        "dto.WalletLogsResponse": {
            "description": "Response for wallet logs",
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.WalletLogEntry"
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "dto.WalletResponse": {
            "description": "Response for wallet information",
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.Wallet"
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiEmailAuth": {
            "description": "User email for authentication",
            "type": "apiKey",
            "name": "X-User-Email",
            "in": "header"
        },
        "ApiKeyAuth": {
            "description": "User ID for authentication",
            "type": "apiKey",
            "name": "X-User-Id",
            "in": "header"
        },
        "ApiRoleAuth": {
            "description": "User role for authentication",
            "type": "apiKey",
            "name": "X-User-Role",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Wallet Service API",
	Description:      "This is a wallet service API for managing platform tokens",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
